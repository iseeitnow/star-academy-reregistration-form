package finalproject;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author ais
 */
public class pages extends javax.swing.JFrame {

    private void blank_form() {
        String adcodes = validatePage.adCode.getText();
        String adnums = validatePage.adNum.getText();
        
        candidateNum.setText(adcodes + "-" + adnums);
        fullName.setText(null);
        nickName.setText(null);
        pob.setText(null);
        dob.setDate(null);
        gender.clearSelection();
        religion.setSelectedIndex(0);
        bloodType.clearSelection();
        height.setText(null);
        weight.setText(null);
        size.clearSelection();
        address.setText(null);
        email.setText(null);
        phoneNumb.setText(null);
        classGroup.clearSelection();
        programGroup.clearSelection();
        majorGroup.clearSelection();
        department.clearSelection();
        club1.clearSelection();
        club2.clearSelection();
    }

    private void ShowData() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("No.");
        model.addColumn("Candidate Number");
        model.addColumn("Full Name");
        model.addColumn("Nickname");
        model.addColumn("Place of Birth");
        model.addColumn("Date of Birth");
        model.addColumn("Gender");
        model.addColumn("Religion");
        model.addColumn("Blood Type");
        model.addColumn("Height");
        model.addColumn("Weight");
        model.addColumn("Shirt Size");
        model.addColumn("Address");
        model.addColumn("Email");
        model.addColumn("Phone Number");
        model.addColumn("Class Selection");
        model.addColumn("Program Selection");
        model.addColumn("Major Selection");
        model.addColumn("Department Selection");
        model.addColumn("Club 1");
        model.addColumn("Club 2");
        
        try {
            int no = 1;
            String sql = "SELECT * FROM form";
            java.sql.Connection conn = (Connection)config.configDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet res = stm.executeQuery(sql);
            
            while (res.next()) {
                model.addRow (new Object[] {no++, res.getString(1), res.getString(2),
                    res.getString(3), res.getString(4), res.getString(5), res.getString(6),
                    res.getString(7), res.getString(8), res.getString(9), res.getString(10),
                    res.getString(11), res.getString(12), res.getString(13), res.getString(14),
                    res.getString(15), res.getString(16), res.getString(17), res.getString(18),
                    res.getString(19), res.getString(20)});
            }
        table_form.setModel(model);
    } catch (SQLException e) {
        System.out.println("Error: " + e.getMessage());
    }
}
    
    public pages() {
        initComponents();
        ShowData();
        blank_form();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender = new javax.swing.ButtonGroup();
        bloodType = new javax.swing.ButtonGroup();
        size = new javax.swing.ButtonGroup();
        classGroup = new javax.swing.ButtonGroup();
        programGroup = new javax.swing.ButtonGroup();
        majorGroup = new javax.swing.ButtonGroup();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        exit = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        XS = new javax.swing.JCheckBox();
        S = new javax.swing.JCheckBox();
        fullName = new javax.swing.JTextField();
        M = new javax.swing.JCheckBox();
        nickName = new javax.swing.JTextField();
        pob = new javax.swing.JTextField();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        email = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        A = new javax.swing.JRadioButton();
        B = new javax.swing.JRadioButton();
        AB = new javax.swing.JRadioButton();
        O = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        height = new javax.swing.JTextField();
        weight = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        L = new javax.swing.JCheckBox();
        XL = new javax.swing.JCheckBox();
        XXL = new javax.swing.JCheckBox();
        XXXL = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        phoneNumb = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        department = new javax.swing.JList<>();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        club2 = new javax.swing.JList<>();
        jLabel18 = new javax.swing.JLabel();
        science = new javax.swing.JRadioButton();
        beginner = new javax.swing.JRadioButton();
        social = new javax.swing.JRadioButton();
        pro = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        inten = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        club1 = new javax.swing.JList<>();
        jLabel20 = new javax.swing.JLabel();
        morning = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        evening = new javax.swing.JRadioButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        finish = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        save = new javax.swing.JButton();
        hello = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        dob = new com.toedter.calendar.JDateChooser();
        religion = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        table_form = new javax.swing.JTable();
        candidateNum = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        edit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Star Academy Registration");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jScrollPane5.setMaximumSize(new java.awt.Dimension(32768, 32768));

        jPanel1.setBackground(new java.awt.Color(88, 73, 30));
        jPanel1.setForeground(new java.awt.Color(196, 165, 127));
        jPanel1.setPreferredSize(new java.awt.Dimension(2073, 2000));

        exit.setBackground(new java.awt.Color(223, 205, 159));
        exit.setForeground(new java.awt.Color(88, 73, 30));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(196, 165, 127));
        jLabel6.setText("Gender");

        reset.setBackground(new java.awt.Color(223, 205, 159));
        reset.setForeground(new java.awt.Color(88, 73, 30));
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(196, 165, 127));
        jLabel7.setText("Email");

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(196, 165, 127));
        jLabel26.setText("Shirt Size");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(196, 165, 127));
        jLabel8.setText("Nickname");

        XS.setBackground(new java.awt.Color(88, 73, 30));
        size.add(XS);
        XS.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        XS.setForeground(new java.awt.Color(196, 165, 127));
        XS.setText("XS");

        S.setBackground(new java.awt.Color(88, 73, 30));
        size.add(S);
        S.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        S.setForeground(new java.awt.Color(196, 165, 127));
        S.setText("S");
        S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SActionPerformed(evt);
            }
        });

        fullName.setBackground(new java.awt.Color(223, 205, 159));
        fullName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fullName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        fullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fullNameKeyPressed(evt);
            }
        });

        M.setBackground(new java.awt.Color(88, 73, 30));
        size.add(M);
        M.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        M.setForeground(new java.awt.Color(196, 165, 127));
        M.setText("M");

        nickName.setBackground(new java.awt.Color(223, 205, 159));
        nickName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nickName.setForeground(new java.awt.Color(33, 35, 77));
        nickName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        nickName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nickNameKeyPressed(evt);
            }
        });

        pob.setBackground(new java.awt.Color(223, 205, 159));
        pob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pob.setForeground(new java.awt.Color(33, 35, 77));
        pob.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        pob.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pobKeyPressed(evt);
            }
        });

        male.setBackground(new java.awt.Color(88, 73, 30));
        gender.add(male);
        male.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        male.setForeground(new java.awt.Color(196, 165, 127));
        male.setText("Male");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        female.setBackground(new java.awt.Color(88, 73, 30));
        gender.add(female);
        female.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        female.setForeground(new java.awt.Color(196, 165, 127));
        female.setLabel("Female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        email.setBackground(new java.awt.Color(223, 205, 159));
        email.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        email.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(196, 165, 127));
        jLabel11.setText("Blood Type");

        A.setBackground(new java.awt.Color(88, 73, 30));
        bloodType.add(A);
        A.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        A.setForeground(new java.awt.Color(196, 165, 127));
        A.setText("A");

        B.setBackground(new java.awt.Color(88, 73, 30));
        bloodType.add(B);
        B.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        B.setForeground(new java.awt.Color(196, 165, 127));
        B.setText("B");

        AB.setBackground(new java.awt.Color(88, 73, 30));
        bloodType.add(AB);
        AB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AB.setForeground(new java.awt.Color(196, 165, 127));
        AB.setText("AB");

        O.setBackground(new java.awt.Color(88, 73, 30));
        bloodType.add(O);
        O.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        O.setForeground(new java.awt.Color(196, 165, 127));
        O.setText("O");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(196, 165, 127));
        jLabel12.setText("Height");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(196, 165, 127));
        jLabel13.setText("Weight");

        height.setBackground(new java.awt.Color(223, 205, 159));
        height.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        height.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        height.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                heightKeyPressed(evt);
            }
        });

        weight.setBackground(new java.awt.Color(223, 205, 159));
        weight.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        weight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        weight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weightKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(196, 165, 127));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STAR ACADEMY RE-REGISTRATION FORM");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(196, 165, 127));
        jLabel2.setText("Full Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(196, 165, 127));
        jLabel3.setText("Place of Birth");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(196, 165, 127));
        jLabel4.setText("Religion");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(196, 165, 127));
        jLabel5.setText("Address");

        L.setBackground(new java.awt.Color(88, 73, 30));
        size.add(L);
        L.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        L.setForeground(new java.awt.Color(196, 165, 127));
        L.setText("L");

        XL.setBackground(new java.awt.Color(88, 73, 30));
        size.add(XL);
        XL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        XL.setForeground(new java.awt.Color(196, 165, 127));
        XL.setText("XL");

        XXL.setBackground(new java.awt.Color(88, 73, 30));
        size.add(XXL);
        XXL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        XXL.setForeground(new java.awt.Color(196, 165, 127));
        XXL.setText("XXL");

        XXXL.setBackground(new java.awt.Color(88, 73, 30));
        size.add(XXXL);
        XXXL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        XXXL.setForeground(new java.awt.Color(196, 165, 127));
        XXXL.setText("XXXL");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(196, 165, 127));
        jLabel16.setText("Phone Number");

        phoneNumb.setBackground(new java.awt.Color(223, 205, 159));
        phoneNumb.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        phoneNumb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        phoneNumb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                phoneNumbKeyPressed(evt);
            }
        });

        department.setBackground(new java.awt.Color(223, 205, 159));
        department.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        department.setForeground(new java.awt.Color(88, 73, 30));
        department.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Department of Fashion Design", "Department of Fashion Modelling", "Department of Practical Dance", "Department of Practical Music", "Department of Stage Arts", "Department of Theatre and Film" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(department);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(196, 165, 127));
        jLabel17.setText("Department");

        club2.setBackground(new java.awt.Color(223, 205, 159));
        club2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        club2.setForeground(new java.awt.Color(88, 73, 30));
        club2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Astronomy Club", "Baking & Cooking Club", "Baseball Club", "Basketball Club", "Chess Club", "Foreign Languages Club", "Gymnastic Club", "Investment Club", "Mathletes Club", "Photography Club", "Pottery Club", "Soccer Club", "Video Game Club" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(club2);

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(196, 165, 127));
        jLabel18.setText("Class");

        science.setBackground(new java.awt.Color(88, 73, 30));
        majorGroup.add(science);
        science.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        science.setForeground(new java.awt.Color(196, 165, 127));
        science.setText("Natural Science");

        beginner.setBackground(new java.awt.Color(88, 73, 30));
        classGroup.add(beginner);
        beginner.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        beginner.setForeground(new java.awt.Color(196, 165, 127));
        beginner.setText("Beginner Class");
        beginner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginnerActionPerformed(evt);
            }
        });

        social.setBackground(new java.awt.Color(88, 73, 30));
        majorGroup.add(social);
        social.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        social.setForeground(new java.awt.Color(196, 165, 127));
        social.setText("Social Science");
        social.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socialActionPerformed(evt);
            }
        });

        pro.setBackground(new java.awt.Color(88, 73, 30));
        classGroup.add(pro);
        pro.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pro.setForeground(new java.awt.Color(196, 165, 127));
        pro.setText("Professional Class");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(196, 165, 127));
        jLabel19.setText("Club 1*");

        inten.setBackground(new java.awt.Color(88, 73, 30));
        classGroup.add(inten);
        inten.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inten.setForeground(new java.awt.Color(196, 165, 127));
        inten.setText("Intensive Class");
        inten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intenActionPerformed(evt);
            }
        });

        club1.setBackground(new java.awt.Color(223, 205, 159));
        club1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        club1.setForeground(new java.awt.Color(88, 73, 30));
        club1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Astronomy Club", "Baking & Cooking Club", "Baseball Club", "Basketball Club", "Chess Club", "Foreign Languages Club", "Gymnastic Club", "Investment Club", "Mathletes Club", "Photography Club", "Pottery Club", "Soccer Club", "Video Game Club" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(club1);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(196, 165, 127));
        jLabel20.setText("Program");

        morning.setBackground(new java.awt.Color(88, 73, 30));
        programGroup.add(morning);
        morning.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        morning.setForeground(new java.awt.Color(196, 165, 127));
        morning.setText("Morning Program");
        morning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                morningActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(196, 165, 127));
        jLabel21.setText("Club 2*");

        evening.setBackground(new java.awt.Color(88, 73, 30));
        programGroup.add(evening);
        evening.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        evening.setForeground(new java.awt.Color(196, 165, 127));
        evening.setText("Evening Program");
        evening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eveningActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(196, 165, 127));
        jLabel22.setText("*You are obligated to choose 2 clubs of your choice from the options above");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(196, 165, 127));
        jLabel23.setText("Major");

        finish.setForeground(new java.awt.Color(88, 73, 30));
        finish.setText("Finish");
        finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(223, 205, 159));
        delete.setForeground(new java.awt.Color(88, 73, 30));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        save.setBackground(new java.awt.Color(223, 205, 159));
        save.setForeground(new java.awt.Color(88, 73, 30));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        hello.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hello.setForeground(new java.awt.Color(196, 165, 127));
        hello.setText("jLabel9");

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\ais\\Downloads\\starad2.png")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(196, 165, 127));
        jLabel10.setText("Date of Birth");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(196, 165, 127));
        jLabel24.setText("Candidate Number");

        dob.setBackground(new java.awt.Color(223, 205, 159));
        dob.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        dob.setDateFormatString("d MMMM yyyy");

        religion.setBackground(new java.awt.Color(223, 205, 159));
        religion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Religion", "Islam", "Christian", "Catholic", "Hindu", "Buddha", "Conficius" }));
        religion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));

        table_form.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_form.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_formMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(table_form);

        candidateNum.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        candidateNum.setForeground(new java.awt.Color(196, 165, 127));
        candidateNum.setText("jLabel25");

        address.setBackground(new java.awt.Color(223, 205, 159));
        address.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        address.setForeground(new java.awt.Color(33, 35, 77));
        address.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(223, 205, 159)));
        address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addressKeyPressed(evt);
            }
        });

        edit.setBackground(new java.awt.Color(223, 205, 159));
        edit.setForeground(new java.awt.Color(88, 73, 30));
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(372, 372, 372))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(334, 334, 334)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(263, 263, 263))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(610, 610, 610)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1036, 1036, 1036)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel20)
                            .addComponent(jLabel23)
                            .addComponent(jLabel17))
                        .addGap(76, 76, 76)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(morning)
                                    .addComponent(science))
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(evening)
                                    .addComponent(social)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(beginner)
                                .addGap(59, 59, 59)
                                .addComponent(pro)
                                .addGap(55, 55, 55)
                                .addComponent(inten))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(238, 238, 238)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1789, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 208, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hello)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel24)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel2))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(2, 2, 2)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel10)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel12)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addGap(93, 93, 93)))
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel16))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(XS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(S)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(M)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(L)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(XL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(XXL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(XXXL))
                                    .addComponent(candidateNum)
                                    .addComponent(fullName, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nickName, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pob, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(male)
                                        .addGap(28, 28, 28)
                                        .addComponent(female))
                                    .addComponent(religion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(A)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(B)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(O))
                                    .addComponent(height, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(phoneNumb, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(292, 292, 292)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(finish, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(304, 304, 304))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hello)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(candidateNum)
                            .addComponent(jLabel18)
                            .addComponent(beginner)
                            .addComponent(pro)
                            .addComponent(inten)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel1))
                            .addComponent(jLabel9))
                        .addGap(153, 153, 153)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel20)
                    .addComponent(morning)
                    .addComponent(evening))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nickName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(science)
                    .addComponent(social))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pob, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel17))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(male)
                            .addComponent(female)
                            .addComponent(jLabel6)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel22)
                        .addGap(65, 65, 65)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reset)
                            .addComponent(save)
                            .addComponent(delete)
                            .addComponent(exit)
                            .addComponent(finish)
                            .addComponent(edit)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(religion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(A)
                            .addComponent(B)
                            .addComponent(AB)
                            .addComponent(O))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(height, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(XS)
                            .addComponent(S)
                            .addComponent(M)
                            .addComponent(L)
                            .addComponent(XL)
                            .addComponent(XXL)
                            .addComponent(XXXL))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(phoneNumb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(64, 64, 64)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(745, Short.MAX_VALUE))
        );

        jScrollPane5.setViewportView(jPanel1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1988, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1312, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String adcodes = validatePage.adCode.getText();
        String adnums = validatePage.adNum.getText();
        
        hello.setText("Hello, new candidate!");
        candidateNum.setText(adcodes + "-" + adnums);
    }//GEN-LAST:event_formWindowOpened

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        String a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;

        u = candidateNum.getText();
        a = fullName.getText();
        b = nickName.getText();
        c = pob.getText();
        d = ((JTextField)dob.getDateEditor()).getText();

        if (male.isSelected()) {
            f = male.getText();
        } else {
            f = female.getText();
        }

        g = religion.getSelectedItem().toString();

        if (A.isSelected()) {
            h = A.getText();
        } else if (B.isSelected()) {
            h = B.getText();
        } else if (AB.isSelected()) {
            h = AB.getText();
        } else {
            h = O.getText();
        }

        i = height.getText();
        j = weight.getText();

        if (XS.isSelected()) {
            k = XS.getText();
        } else if (S.isSelected()) {
            k = S.getText();
        } else if (M.isSelected()) {
            k = M.getText();
        } else if (L.isSelected()) {
            k = L.getText();
        } else if (XL.isSelected()) {
            k = XL.getText();
        } else if (XXL.isSelected()) {
            k = XXL.getText();
        } else {
            k = XXXL.getText();
        }

        l = address.getText();
        m = email.getText();
        n = phoneNumb.getText();

        if (beginner.isSelected()) {
            o = beginner.getText();
        } else if (pro.isSelected()) {
            o = pro.getText();
        } else {
            o = inten.getText();
        }

        if (morning.isSelected()) {
            p = morning.getText();
        } else {
            p = evening.getText();
        }

        if (science.isSelected()) {
            q = science.getText();
        } else {
            q = social.getText();
        }

        r = department.getSelectedValue();
        s = club1.getSelectedValue();
        t = club2.getSelectedValue();

        try {
            String sql = "UPDATE form SET CandidateNumb = '"+u+"', FullName = '"+a+"', NickName = '"+b+"', PlaceofBirth = '"+c+"', DateofBirth = '"+d+"',"
            +" Gender = '"+f+"', Religion = '"+g+"', BloodType= '"+h+"', Height = '"+i+"', Weight = '"+j+"', ShirtSize = '"+k+"', Address = '"+l+"',"
            +" Email = '"+m+"', PhoneNumber = '"+n+"', Class = '"+o+"', Program = '"+p+"', Major = '"+q+"', Department = '"+r+"', Club1 = '"+s+"', Club2 = '"+t+"'"
            + "WHERE CandidateNumb = '"+u+"'";
            java.sql.Connection conn = (Connection)config.configDB();
            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.execute();
            
            if (!candidateNum.getText().equals("") && candidateNum.getText().equals("jLabel25")) {
                JOptionPane.showMessageDialog(null, "Candidate Number is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (fullName.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Full Name is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (nickName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nickname is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (pob.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Place of Birth is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (((JTextField)dob.getDateEditor().getUiComponent()).getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Date of Birth is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            }else if (!male.isSelected() && !female.isSelected()) {
                JOptionPane.showMessageDialog(null, "Gender is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (religion.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Religion is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!A.isSelected() && !B.isSelected() && !AB.isSelected() && !O.isSelected()) {
                JOptionPane.showMessageDialog(null, "Blood Type is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (height.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Height is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (weight.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Weight is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!XS.isSelected() && !S.isSelected() && !M.isSelected() && !L.isSelected() && !XL.isSelected() && !XXL.isSelected() && !XXXL.isSelected()) {
                JOptionPane.showMessageDialog(null, "Shirt Size is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (address.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Address is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (email.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Email is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (phoneNumb.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Phone Number is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!beginner.isSelected() && !pro.isSelected() && !inten.isSelected()) {
                JOptionPane.showMessageDialog(null, "Class Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!morning.isSelected() && !evening.isSelected()) {
                JOptionPane.showMessageDialog(null, "Program Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!science.isSelected() && !social.isSelected()) {
                JOptionPane.showMessageDialog(null, "Major Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (department.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Department Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (club1.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Club 1 Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (club2.isSelectionEmpty()){
                JOptionPane.showMessageDialog(null, "Club 2 Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Edit data successful");
            }
            
        } catch(HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        ShowData();
        blank_form();
    }//GEN-LAST:event_editActionPerformed

    private void addressKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressKeyPressed

    private void table_formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_formMouseClicked
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel)table_form.getModel();
        int row = table_form.getSelectedRow();

        String CandidateNumb = table.getValueAt(row, 1).toString();
        candidateNum.setText(CandidateNumb);

        String FullName = table.getValueAt(row, 2).toString();
        fullName.setText(FullName);

        String NickName = table.getValueAt(row, 3).toString();
        nickName.setText(NickName);

        String PlaceofBirth = table.getValueAt(row, 4).toString();
        pob.setText(PlaceofBirth);

        String DateofBirth = table.getValueAt(row, 5).toString();
        DateofBirth = ((JTextField)dob.getDateEditor()).getText();

        if("Female".equals(table.getValueAt(row, 6).toString())) {
            female.setSelected(true);
        } else {
            male.setSelected(true);
        }

        String Religion = table.getValueAt(row, 7).toString();
        switch (Religion) {
            case "Islam":
            religion.setSelectedIndex(1);
            case "Christian":
            religion.setSelectedIndex(2);
            case "Catholic":
            religion.setSelectedIndex(3);
            case "Hindu":
            religion.setSelectedIndex(4);
            case "Buddha":
            religion.setSelectedIndex(5);
            case "Conficius":
            religion.setSelectedIndex(6);
        }

        String BloodType = table.getValueAt(row, 8).toString();
        switch (BloodType) {
            case "A":
            A.setSelected(true);
            break;
            case "B":
            B.setSelected(true);
            break;
            case "AB":
            AB.setSelected(true);
            break;
            case "O":
            O.setSelected(true);
            break;
        }

        String Height = table.getValueAt(row, 9).toString();
        height.setText(Height);

        String Weight = table.getValueAt(row, 10).toString();
        weight.setText(Weight);

        String ShirtSize = table.getValueAt(row, 11).toString();
        switch(ShirtSize) {
            case "XS":
            XS.setSelected(true);
            S.setSelected(false);
            M.setSelected(false);
            L.setSelected(false);
            XL.setSelected(false);
            XXL.setSelected(false);
            XXXL.setSelected(false);
            break;
            case "S":
            S.setSelected(true);
            XS.setSelected(false);
            M.setSelected(false);
            L.setSelected(false);
            XL.setSelected(false);
            XXL.setSelected(false);
            XXXL.setSelected(false);
            break;
            case "M":
            M.setSelected(true);
            XS.setSelected(false);
            S.setSelected(false);
            L.setSelected(false);
            XL.setSelected(false);
            XXL.setSelected(false);
            XXXL.setSelected(false);
            break;
            case "L":
            L.setSelected(true);
            XS.setSelected(false);
            S.setSelected(false);
            M.setSelected(false);
            XL.setSelected(false);
            XXL.setSelected(false);
            XXXL.setSelected(false);
            break;
            case "XL":
            XL.setSelected(true);
            XS.setSelected(false);
            S.setSelected(false);
            M.setSelected(false);
            L.setSelected(false);
            XXL.setSelected(false);
            XXXL.setSelected(false);
            break;
            case "XXL":
            XXL.setSelected(true);
            XS.setSelected(false);
            S.setSelected(false);
            M.setSelected(false);
            L.setSelected(false);
            XL.setSelected(false);
            XXXL.setSelected(false);
            break;
            case "XXXL":
            XXXL.setSelected(true);
            XS.setSelected(false);
            S.setSelected(false);
            M.setSelected(false);
            L.setSelected(false);
            XL.setSelected(false);
            XXL.setSelected(false);
            break;
            default:
            XS.setSelected(true);
            S.setSelected(true);
            M.setSelected(true);
            L.setSelected(true);
            XL.setSelected(true);
            XXL.setSelected(true);
            XXXL.setSelected(true);
            break;
        }

        String Address = table.getValueAt(row, 12).toString();
        address.setText(Address);

        String Email = table.getValueAt(row, 13).toString();
        email.setText(Email);

        String PhoneNumber = table.getValueAt(row, 14).toString();
        phoneNumb.setText(PhoneNumber);

        String Class = table.getValueAt(row, 15).toString();
        switch (Class) {
            case "Beginner Class":
            beginner.setSelected(true);
            break;
            case "Professional Class":
            pro.setSelected(true);
            break;
            case "Intensive Class":
            inten.setSelected(true);
            break;
        }

        String Program = table.getValueAt(row, 16).toString();
        switch (Program) {
            case "Morning Program":
            morning.setSelected(true);
            case "Evening Program":
            evening.setSelected(true);
        }

        String Major = table.getValueAt(row, 17).toString();
        switch (Major) {
            case "Natural Science":
            science.setSelected(true);
            case "Social Science":
            social.setSelected(true);
        }

        String Department = table.getValueAt(row, 18).toString();
        switch(Department){
            case "Department of Fashion Design":
            department.setSelectedIndex(0);
            break;
            case "Department of Fashion Modelling":
            department.setSelectedIndex(1);
            break;
            case "Department of Practical Dance":
            department.setSelectedIndex(2);
            break;
            case "Department of Practical Music":
            department.setSelectedIndex(3);
            break;
            case "Department of Stage Arts":
            department.setSelectedIndex(4);
            break;
            case "Department of Theatre and Film":
            department.setSelectedIndex(5);
            break;
        }

        String Club1 = table.getValueAt(row, 19).toString();
        switch(Club1){
            case "Astronomy Club":
            club1.setSelectedIndex(0);
            break;
            case "Baking & Cooking Club":
            club1.setSelectedIndex(1);
            break;
            case "Baseball Club":
            club1.setSelectedIndex(2);
            break;
            case "Basketball Club":
            club1.setSelectedIndex(3);
            break;
            case "Chess Club":
            club1.setSelectedIndex(4);
            break;
            case "Foreign Languages Club":
            club1.setSelectedIndex(5);
            break;
            case "Gymnastic Club":
            club1.setSelectedIndex(6);
            break;
            case "Investment Club":
            club1.setSelectedIndex(7);
            break;
            case "Mathletes Club":
            club1.setSelectedIndex(8);
            break;
            case "Photography Club":
            club1.setSelectedIndex(9);
            break;
            case "Pottery Club":
            club1.setSelectedIndex(10);
            break;
            case "Soccer Club":
            club1.setSelectedIndex(11);
            break;
            case "Video Game Club":
            club1.setSelectedIndex(12);
            break;
        }

        String Club2 = table.getValueAt(row, 20).toString();
        switch(Club2){
            case "Astronomy Club":
            club2.setSelectedIndex(0);
            break;
            case "Baking & Cooking Club":
            club2.setSelectedIndex(1);
            break;
            case "Baseball Club":
            club2.setSelectedIndex(2);
            break;
            case "Basketball Club":
            club2.setSelectedIndex(3);
            break;
            case "Chess Club":
            club2.setSelectedIndex(4);
            break;
            case "Foreign Languages Club":
            club2.setSelectedIndex(5);
            break;
            case "Gymnastic Club":
            club2.setSelectedIndex(6);
            break;
            case "Investment Club":
            club2.setSelectedIndex(7);
            break;
            case "Mathletes Club":
            club2.setSelectedIndex(8);
            break;
            case "Photography Club":
            club2.setSelectedIndex(9);
            break;
            case "Pottery Club":
            club2.setSelectedIndex(10);
            break;
            case "Soccer Club":
            club2.setSelectedIndex(11);
            break;
            case "Video Game Club":
            club2.setSelectedIndex(12);
            break;
        }
    }//GEN-LAST:event_table_formMouseClicked

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        String a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;

        u = candidateNum.getText();
        a = fullName.getText();
        b = nickName.getText();
        c = pob.getText();
        d = ((JTextField)dob.getDateEditor()).getText();

        if (male.isSelected()) {
            f = male.getText();
        } else {
            f = female.getText();
        }

        g = religion.getSelectedItem().toString();

        if (A.isSelected()) {
            h = A.getText();
        } else if (B.isSelected()) {
            h = B.getText();
        } else if (AB.isSelected()) {
            h = AB.getText();
        } else {
            h = O.getText();
        }

        i = height.getText();
        j = weight.getText();

        if (XS.isSelected()) {
            k = XS.getText();
        } else if (S.isSelected()) {
            k = S.getText();
        } else if (M.isSelected()) {
            k = M.getText();
        } else if (L.isSelected()) {
            k = L.getText();
        } else if (XL.isSelected()) {
            k = XL.getText();
        } else if (XXL.isSelected()) {
            k = XXL.getText();
        } else {
            k = XXXL.getText();
        }

        l = address.getText();
        m = email.getText();
        n = phoneNumb.getText();
        if (beginner.isSelected()) {
            o = beginner.getText();
        } else if (pro.isSelected()) {
            o = pro.getText();
        } else {
            o = inten.getText();
        }

        if (morning.isSelected()) {
            p = morning.getText();
        } else {
            p = evening.getText();
        }

        if (science.isSelected()) {
            q = science.getText();
        } else {
            q = social.getText();
        }

        r = department.getSelectedValue();
        s = club1.getSelectedValue();
        t = club2.getSelectedValue();

        try {
            String sql = "INSERT INTO form VALUES('"+u+"','"+ a+"','"+b+"','"+c+"','"+d+"','"+f+"',"
            +"'"+g+"','"+h+"','"+i+"','"+j+"','"+k+"','"+l+"','"+m+"','"+n+"','"+o+"','"+p+"','"+q+"','"+r+"','"+s+"','"+t+"')";
            java.sql.Connection conn = (Connection)config.configDB();
            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.execute();

            if (!candidateNum.getText().equals("") && candidateNum.getText().equals("jLabel25")) {
                JOptionPane.showMessageDialog(null, "Candidate Number is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (fullName.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Full Name is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (nickName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nickname is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (pob.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Place of Birth is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (((JTextField)dob.getDateEditor().getUiComponent()).getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Date of Birth is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            }else if (!male.isSelected() && !female.isSelected()) {
                JOptionPane.showMessageDialog(null, "Gender is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (religion.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Religion is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!A.isSelected() && !B.isSelected() && !AB.isSelected() && !O.isSelected()) {
                JOptionPane.showMessageDialog(null, "Blood Type is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (height.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Height is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (weight.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Weight is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!XS.isSelected() && !S.isSelected() && !M.isSelected() && !L.isSelected() && !XL.isSelected() && !XXL.isSelected() && !XXXL.isSelected()) {
                JOptionPane.showMessageDialog(null, "Shirt Size is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (address.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Address is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (email.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Email is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (phoneNumb.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Phone Number is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!beginner.isSelected() && !pro.isSelected() && !inten.isSelected()) {
                JOptionPane.showMessageDialog(null, "Class Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!morning.isSelected() && !evening.isSelected()) {
                JOptionPane.showMessageDialog(null, "Program Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!science.isSelected() && !social.isSelected()) {
                JOptionPane.showMessageDialog(null, "Major Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (department.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Department Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (club1.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Club 1 Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (club2.isSelectionEmpty()){
                JOptionPane.showMessageDialog(null, "Club 2 Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Saving data successful");
                ShowData();
                blank_form();
            }

        } catch(HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_saveActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        String a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;

        u = candidateNum.getText();
        a = fullName.getText();
        b = nickName.getText();
        c = pob.getText();
        d = ((JTextField)dob.getDateEditor()).getText();

        if (male.isSelected()) {
            f = male.getText();
        } else {
            f = female.getText();
        }

        g = religion.getSelectedItem().toString();

        if (A.isSelected()) {
            h = A.getText();
        } else if (B.isSelected()) {
            h = B.getText();
        } else if (AB.isSelected()) {
            h = AB.getText();
        } else {
            h = O.getText();
        }

        i = height.getText();
        j = weight.getText();

        if (XS.isSelected()) {
            k = XS.getText();
        } else if (S.isSelected()) {
            k = S.getText();
        } else if (M.isSelected()) {
            k = M.getText();
        } else if (L.isSelected()) {
            k = L.getText();
        } else if (XL.isSelected()) {
            k = XL.getText();
        } else if (XXL.isSelected()) {
            k = XXL.getText();
        } else {
            k = XXXL.getText();
        }

        l = address.getText();
        m = email.getText();
        n = phoneNumb.getText();

        if (beginner.isSelected()) {
            o = beginner.getText();
        } else if (pro.isSelected()) {
            o = pro.getText();
        } else {
            o = inten.getText();
        }

        if (morning.isSelected()) {
            p = morning.getText();
        } else {
            p = evening.getText();
        }

        if (science.isSelected()) {
            q = science.getText();
        } else {
            q = social.getText();
        }

        r = department.getSelectedValue();
        s = club1.getSelectedValue();
        t = club2.getSelectedValue();

        try {
            String sql = "DELETE FROM form WHERE CandidateNumb = '"+u+"'";
            java.sql.Connection conn = (Connection)config.configDB();
            java.sql.PreparedStatement pstm = conn.prepareStatement(sql);
            pstm.execute();
            JOptionPane.showMessageDialog(null, "Delete data successful");
        } catch(HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        ShowData();
        blank_form();
    }//GEN-LAST:event_deleteActionPerformed

    private void finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishActionPerformed
        // TODO add your handling code here:
        int ans;
        ans = JOptionPane.showOptionDialog(this,
            "Are you sure you already finish submitting your data?",
            "Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE, null, null, null);

        if(ans == JOptionPane.YES_OPTION){
            if (candidateNum.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Candidate Number is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (fullName.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Full Name is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (nickName.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nickname is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (pob.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Place of Birth is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (((JTextField)dob.getDateEditor().getUiComponent()).getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Date of Birth is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            }else if (!male.isSelected() && !female.isSelected()) {
                JOptionPane.showMessageDialog(null, "Gender is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (religion.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Religion is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!A.isSelected() && !B.isSelected() && !AB.isSelected() && !O.isSelected()) {
                JOptionPane.showMessageDialog(null, "Blood Type is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (height.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Height is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (weight.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Weight is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!XS.isSelected() && !S.isSelected() && !M.isSelected() && !L.isSelected() && !XL.isSelected() && !XXL.isSelected() && !XXXL.isSelected()) {
                JOptionPane.showMessageDialog(null, "Shirt Size is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (address.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Address is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (email.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Email is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (phoneNumb.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Phone Number is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!beginner.isSelected() && !pro.isSelected() && !inten.isSelected()) {
                JOptionPane.showMessageDialog(null, "Class Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!morning.isSelected() && !evening.isSelected()) {
                JOptionPane.showMessageDialog(null, "Program Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (!science.isSelected() && !social.isSelected()) {
                JOptionPane.showMessageDialog(null, "Major Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (department.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Department Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (club1.isSelectionEmpty()) {
                JOptionPane.showMessageDialog(null, "Club 1 Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else if (club2.isSelectionEmpty()){
                JOptionPane.showMessageDialog(null, "Club 2 Selection is required to be filled", "Reminder", JOptionPane.WARNING_MESSAGE);
            } else {
                byeBye BYE = new byeBye();

            BYE.setVisible(true);
            this.setVisible(false);
            }
        } 
        
        
    }//GEN-LAST:event_finishActionPerformed

    private void eveningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eveningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eveningActionPerformed

    private void morningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_morningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_morningActionPerformed

    private void intenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intenActionPerformed

    private void socialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_socialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_socialActionPerformed

    private void beginnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginnerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_beginnerActionPerformed

    private void phoneNumbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneNumbKeyPressed
        // TODO add your handling code here:
        String phoneNum = phoneNumb.getText();

        int length = phoneNum.length();

        char e;
        e = evt.getKeyChar();

        // Check for number 0 to 9
        if(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') {
            // Check for length not more than 6 digit
            if (length < 12) {
                phoneNumb.setEditable(true);
            } else {
                phoneNumb.setEditable(false);
            }
        } else {
            // Allow key to backspace and edit
            if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE) {
                phoneNumb.setEditable(true);
            } else {
                phoneNumb.setEditable(false);
            }
        }
    }//GEN-LAST:event_phoneNumbKeyPressed

    private void weightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weightKeyPressed
        // TODO add your handling code here:
        String Weight = weight.getText();

        int length = Weight.length();

        char e;
        e = evt.getKeyChar();

        // Check for number 0 to 9
        if(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') {
            // Check for length not more than 6 digit
            if (length < 3) {
                weight.setEditable(true);
            } else {
                weight.setEditable(false);
            }
        } else {
            // Allow key to backspace and edit
            if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE) {
                weight.setEditable(true);
            } else {
                weight.setEditable(false);
            }
        }
    }//GEN-LAST:event_weightKeyPressed

    private void heightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heightKeyPressed
        // TODO add your handling code here:
        String Height = height.getText();

        int length = Height.length();

        char e;
        e = evt.getKeyChar();

        // Check for number 0 to 9
        if(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') {
            // Check for length not more than 6 digit
            if (length < 3) {
                height.setEditable(true);
            } else {
                height.setEditable(false);
            }
        } else {
            // Allow key to backspace and edit
            if(evt.getExtendedKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE) {
                height.setEditable(true);
            } else {
                height.setEditable(false);
            }
        }
    }//GEN-LAST:event_heightKeyPressed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maleActionPerformed

    private void pobKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pobKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)) {
            // ISO Control for edit operation (delete key and backspace key allow)
            pob.setEditable(true);
        } else {
            pob.setEditable(false);
        }
    }//GEN-LAST:event_pobKeyPressed

    private void nickNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nickNameKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)) {
            // ISO Control for edit operation (delete key and backspace key allow)
            nickName.setEditable(true);
        } else {
            nickName.setEditable(false);
        }
    }//GEN-LAST:event_nickNameKeyPressed

    private void fullNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fullNameKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)) {
            // ISO Control for edit operation (delete key and backspace key allow)
            fullName.setEditable(true);
        } else {
            fullName.setEditable(false);
        }
    }//GEN-LAST:event_fullNameKeyPressed

    private void SActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        blank_form();
    }//GEN-LAST:event_resetActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new pages().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton A;
    private javax.swing.JRadioButton AB;
    private javax.swing.JRadioButton B;
    private javax.swing.JCheckBox L;
    private javax.swing.JCheckBox M;
    private javax.swing.JRadioButton O;
    private javax.swing.JCheckBox S;
    private javax.swing.JCheckBox XL;
    private javax.swing.JCheckBox XS;
    private javax.swing.JCheckBox XXL;
    private javax.swing.JCheckBox XXXL;
    private javax.swing.JTextField address;
    private javax.swing.JRadioButton beginner;
    private javax.swing.ButtonGroup bloodType;
    private javax.swing.JLabel candidateNum;
    private javax.swing.ButtonGroup classGroup;
    private javax.swing.JList<String> club1;
    private javax.swing.JList<String> club2;
    private javax.swing.JButton delete;
    private javax.swing.JList<String> department;
    private com.toedter.calendar.JDateChooser dob;
    private javax.swing.JButton edit;
    private javax.swing.JTextField email;
    private javax.swing.JRadioButton evening;
    private javax.swing.JButton exit;
    private javax.swing.JRadioButton female;
    private javax.swing.JButton finish;
    private javax.swing.JTextField fullName;
    private javax.swing.ButtonGroup gender;
    private javax.swing.JTextField height;
    private javax.swing.JLabel hello;
    private javax.swing.JRadioButton inten;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.ButtonGroup majorGroup;
    private javax.swing.JRadioButton male;
    private javax.swing.JRadioButton morning;
    private javax.swing.JTextField nickName;
    private javax.swing.JTextField phoneNumb;
    private javax.swing.JTextField pob;
    private javax.swing.JRadioButton pro;
    private javax.swing.ButtonGroup programGroup;
    private javax.swing.JComboBox<String> religion;
    private javax.swing.JButton reset;
    private javax.swing.JButton save;
    private javax.swing.JRadioButton science;
    private javax.swing.ButtonGroup size;
    private javax.swing.JRadioButton social;
    private javax.swing.JTable table_form;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables
}
